================================
üõ¥üõ¥ Flutter 3 Full Stack Workshop  üõ¥üõ¥
================================
‚úà DAY 1
1.‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°
2.‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MySQL ‡∏ú‡πà‡∏≤‡∏ô API
3.‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏ú‡πà‡∏≤‡∏ô API (Node JS)
-------------------------------------------------------
üõ†1. ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°
üíª Java
---
java -version
where java
set JAVA_HOME

üíª Android SK
---
android
where android

üíª Node JS
---
node -v
npm -v
npx -v
where node

üíª Git
---
git version
where git

üíª Flutter SDK
---
flutter --version
flutter doctor
where flutter

üöÄ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô Flutter
---
Step 1: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏≠‡∏ö‡∏£‡∏°‡∏ô‡∏µ‡πâ
----
mkdir Flutter3FullStack

Step 2: ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á
----
flutter create --org  com.itgenius flutter_node_store

Step 2: ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ô VSCode
---
code flutter_node_store -r

Step 3: ‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå

üîå 2.‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MySQL ‡∏ú‡πà‡∏≤‡∏ô API

Step 1: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏ä‡∏∑‡πà‡∏≠ ‚Äúflutterstore‚Äù
---
CREATE DATABASE flutterstore
    DEFAULT CHARACTER SET = 'utf8mb4';

Step 2: Clone Project from and Install node dependencies
---
git clone https://github.com/iamsamitdev/serverapi_ts serverapi

Step 3: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠ .env_example ‡πÄ‡∏õ‡πá‡∏ô .env ‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ
---
DB_HOST=127.0.0.1
DB_USER=root
DB_PASSWORD=123456
DB_PORT=3306
DB_DATABASE=flutterstore
ENV=development
PORT=3000
JWT_SECRET=itgenius@2023secret

Step 4: ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Library
---
npm install

Step 5: ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á migrate ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 
---
npx knex migrate:latest
npm run knex:migrate:latest

Step 6: ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á seed ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
---
npx knex seed:run

Step 7: ‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå Node.JS Express
---
npm start

Step 8: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API Register
---
http://localhost:3000/api/auth/register

Method : Post
Body: Json
{
  "firstname":"Samit",
  "lastname":"Koyom",
  "email":"samit@email.com",
  "password":"123456"
}

Step 9: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API Login
---
http://localhost:3000/api/auth/login

Body: Json
{
  "email":"samit@email.com",
  "password":"123456"
}

Step 10: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API List Products
---
http://localhost:3000/api/products
Method: Get
Auth: Bearer Token

Step 11: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API List Products by id
---
http://localhost:3000/api/products/3
Method: Get
Auth: Bearer Token

üîå 3.‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏ú‡πà‡∏≤‡∏ô API (Node JS)

Step 12: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API Create Product
---
http://localhost:3000/api/products

Method : Post
Auth: Bearer Token
Body: Form

Field name	value
----------------------------------------------------
name		test some product
description	lorem ipsonefa
barcode		845964464485
stock		10
price		29500
category_id	1
user_id		1
status_id		1

Files
---------------------------------------------------
photo		example.jpg

Step 13: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API Edit Product
---
http://localhost:3000/api/products/18

Method : Put
Auth: Bearer Token
Body: Json
{
  "name":"test some product update",
  "description":"lorem ipsonefa update",
  "barcode":"845964464485",
  "stock":11,
  "price":39500,
  "category_id":1,
  "user_id":1,
  "status_id":1
}

Step 14: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API Delete Product
---
http://localhost:3000/api/products/18

Method : Delete
Auth: Bearer Token

-------------------------------------------------------
‚úà DAY 2
-------------------------------------------------------
4: ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö State ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡πÉ‡∏ô Flutter
5: Flutter Layout ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
6: ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡∏Ç‡∏∂‡πâ‡∏ô
7: Workshop CRUD ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å NodeJS API
-------------------------------------------------------
üîÆ 4. ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö State ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡πÉ‡∏ô Flutter
üîÆ 5: Flutter Layout ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
üîÆ 6: ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡∏Ç‡∏∂‡πâ‡∏ô

‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡πÉ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ
Flutter_Node_Store
==================
+---android
+---assets
|   +---fonts
|   \---images
+---build
+---functions
+---ios
+---lib
|   +---components
|   |   +---mobile_layout.dart
|   |   +---responsive_layout.dart
|   |   +---rounded_button.dart
|   |   +---social_media_option.dart
|   |   \---web_layout.dart
|   +---models
|   +---screens
|   |   +---login
|   |   |   +---login_form.dart
|   |   |   \---login_screen.dart
|   |   \---welcome
|   |   |   \---welcome_screen.dart
|   +---services
|   +---themes
|   |   +---colors.dart
|   |   +---styles.dart
|   |   \---text.dart
|   \---utils
+---app_router.dart
+---main.dart
+---linux
+---macos
+---serverapi
+---test
+---web
+---.gitignore
+---.metadata
+---analysis_options.yaml
+---pubspect.yaml
+---README.md

-------------------------------------------------------
‚úà DAY 3
-------------------------------------------------------
Section 7: Workshop CRUD ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å NodeJS API
Section 8: Workshop CRUD ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å NodeJS API (‡∏ï‡πà‡∏≠)
Section 9: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ State ‡∏î‡πâ‡∏ß‡∏¢ Provider
-------------------------------------------------------
Section 7: Workshop CRUD ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å NodeJS API

Flutter_Node_Store
==================
+---android
+---assets
|   +---fonts
|   \---images
+---build
+---functions
+---ios
+---lib
|   +---components
|   |   +---custom_textfield.dart
|   |   +---mobile_layout.dart
|   |   +---responsive_layout.dart
|   |   +---rounded_button.dart
|   |   +---social_media_option.dart
|   |   \---web_layout.dart
|   +---models
|   +---screens
|   |   +---forgotpassword
|   |   |   +---forgot_password_form.dart
|   |   |   \----forgot_password_screen.dart
|   |   +---login
|   |   |   +---login_form.dart
|   |   |   \---login_screen.dart
|   |   +---register
|   |   |   +---register_form.dart
|   |   |   \---register_screen.dart
|   |   \---welcome
|   |   |   \---welcome_screen.dart
|   +---services
|   +---themes
|   |   +---colors.dart
|   |   +---styles.dart
|   |   \---text.dart
|   \---utils
|   |   |   +---constants.dart
+---app_router.dart
+---main.dart
+---linux
+---macos
+---serverapi
+---test
+---web
+---.gitignore
+---.metadata
+---analysis_options.yaml
+---pubspect.yaml
+---README.md

Step 1: ‡∏°‡∏≤‡∏ù‡∏∂‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á Custom Widget ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö TextField
---
‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå custom_textfield.dart ‡πÉ‡∏ô lib/components
---
import 'package:flutter/material.dart';

// CustomTextField ‡∏Ñ‡∏∑‡∏≠ Widget ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡πÄ‡∏≠‡∏á
Widget customTextField({
  required TextEditingController controller,
  required String hintText,
  required Icon prefixIcon,
  required bool obscureText,
  required String? Function(String?)? validator,
}) {
  return TextFormField(
    controller: controller,
    keyboardType: TextInputType.emailAddress,
    autofocus: false,
    enableSuggestions: false,
    autocorrect: false,
    obscureText: obscureText,
    decoration: InputDecoration(
      hintText: hintText,
      prefixIcon: prefixIcon,
      border: OutlineInputBorder(
        borderRadius: BorderRadius.circular(40),
        borderSide: const BorderSide(width: 0, style: BorderStyle.none),
      ),
      filled: true,
      isDense: true,
      contentPadding: const EdgeInsets.fromLTRB(10, 10, 10, 10),
      fillColor: Colors.grey[300],
    ),
    validator: validator,
  );
}

Step 2: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô (register)
---
|   |   +---register
|   |   |   +---register_form.dart
|   |   |   \----register_screen.dart

Step 3: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏•‡∏∑‡∏°‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (forgotpass)
---
|   |   +---forgotpassword
|   |   |   +---forgot_password_form.dart
|   |   |   \----forgot_password_screen.dart

Step 4: ‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Storage ‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
---
‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á library "shared_preferences"
  # Shared Preferences
  shared_preferences: ^2.2.0

Step 5: Set ‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö SharedPreferences ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏¢‡πÅ‡∏™‡∏î‡∏á Intro ‡πÅ‡∏•‡πâ‡∏ß
‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå welcome_screen.dart
---
void _onIntroEnd(context) async {

    SharedPreferences prefs = await SharedPreferences.getInstance();
    prefs.setBool('welcomeStatus', true);

    // ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤ Login
    Navigator.pushReplacementNamed(context, AppRouter.login);
  }

Step 6: ‡∏Å‡∏≥‡∏´‡∏ô‡∏î initialRoute ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö app ‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏•‡πå  main.dart
---
var initialRoute;

...
void main() async {

  // ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ WidgetsFlutterBinding.ensureInitialized()
  // ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ SharedPreferences ‡πÑ‡∏î‡πâ
  WidgetsFlutterBinding.ensureInitialized();

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ prefs ‡πÑ‡∏ß‡πâ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤ SharedPreferences
  SharedPreferences prefs = await SharedPreferences.getInstance();

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏¢‡πÅ‡∏™‡∏î‡∏á Intro ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á 
  if (prefs.getBool('welcomeStatus') == true) {
    initialRoute = AppRouter.login;
  } else {
    initialRoute = AppRouter.welcome;
  }

  runApp(const MyApp());
}

...
@override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Node Store App',
      theme: AppTheme.lightTheme,
      initialRoute: initialRoute,
      routes: AppRouter.routes,
    );
  }


Step 7: ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á lib ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö API
---
  # logger for debugging
  logger: ^2.0.2+1 

  # Network connectivity
  connectivity_plus: ^4.0.1

  # dio
  dio: ^5.3.0

Step 8: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå constants.dart ‡πÑ‡∏ß‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î baseURLAPI ‡∏ó‡∏µ‡πà lib/uitls
---
|   \---utils
|   |   |   +---constants.dart

‡∏Å‡∏≥‡∏´‡∏ô‡∏î path ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ
---
// API URL
// Local
const baseURLAPI = 'http://192.168.1.44:3000/api/';
const baseURLImage = 'http://192.168.1.44:3000/uploads/images/';

// Server
// const baseURLAPI = 'https://serverapi-node.onrender.com/api/';
// const baseURLImage = 'https://serverapi-node.onrender.com/uploads/images/';

Step 9: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå utility.dart ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö network ‡∏ó‡∏µ‡πà lib/uitls
---
|   \---utils
|   |   |   +---constants.dart
|   |   |   +---utility.dart

‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏Ñ‡πâ‡∏î‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ
---
import 'package:connectivity_plus/connectivity_plus.dart';

class Utility {

  // Check Network Connection
  static Future<String> checkNetwork() async {
    
    var checkNetwork = await Connectivity().checkConnectivity();

    if(checkNetwork == ConnectivityResult.none){
      return '';
    } else if(checkNetwork == ConnectivityResult.mobile){
      return 'mobile';
    } else if(checkNetwork == ConnectivityResult.wifi){
      return 'wifi';
    }
    
    return '';

  }

}

Step 10: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå dio_config.dart ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ config ‡πÉ‡∏´‡πâ Dio ‡∏ó‡∏µ‡πà lib/services
---
import 'package:dio/dio.dart';
import 'package:flutter_node_store/main.dart';
import 'package:flutter_node_store/utils/constants.dart';

class DioConfig {

  static final Dio _dio = Dio()
  ..interceptors.add(
    InterceptorsWrapper(
      onRequest: (options, handler) async {
        options.headers['Accept'] = 'application/json';
        options.headers['Content-Type'] = 'application/json';
        options.baseUrl = baseURLAPI;
        return handler.next(options);
      },
      onResponse: (response, handler) async {
        return handler.next(response);
      },
      onError: (DioException e, handler) {
        switch(e.response?.statusCode){
          case 400:
            logger.e('Bad Request');
            break;
          case 401:
            logger.e('Unauthorized');
            break;
          case 403:
            logger.e('Forbidden');
            break;
          case 404:
            logger.e('Not Found');
            break;
          case 500:
            logger.e('Internal Server Error');
            break;
          default:
            logger.e('Something went wrong');
            break;
        }
        return handler.next(e);
      }
    )
  );

  static Dio get dio => _dio;
}

Step 11: ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô rest_api.dart ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ login/register ‡∏ó‡∏µ‡πà lib/services
---
import 'dart:convert';

import 'package:dio/dio.dart';
import 'package:flutter_node_store/main.dart';
import 'package:flutter_node_store/services/dio_config.dart';

class CallAPI {

  // Create Dio Instance
  final Dio _dio = DioConfig.dio;

  // Register API
  registerAPI(data) async {
    try {
      final response = await _dio.post('auth/register', data: data);
      logger.d(response.data);
      return jsonEncode(response.data);
    } catch (e) {
      print(e);
    }
  }

  // Login API
  loginAPI(data) async {
    try {
      final response = await _dio.post('auth/login', data: data);
      logger.d(response.data);
      return jsonEncode(response.data);
    } catch (e) {
      print(e);
    }
  }

}

Step 12: ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£ register ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö webapi ‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏•‡πå lib/screens/register/register_form.dart
---
RoundedButton(
                  label: "SIGN UP",
                  onPressed: () async {
                    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≠‡∏£‡πå‡∏°
                    if (_formKeyRegister.currentState!.validate()) {
                      // ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                      _formKeyRegister.currentState!.save();

                      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏Ç‡πâ‡∏á‡∏≤‡∏ô API Register
                      var response = await CallAPI().registerAPI({
                        "firstname": _firstNameController.text,
                        "lastname": _lastNameController.text,
                        "email": _emailController.text,
                        "password": _passwordController.text
                      });

                      var body = jsonDecode(response);

                      logger.i(body);

                      if (body['message'] == 'No Network Connection') {
                        // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Internet
                        ScaffoldMessenger.of(context).showSnackBar(
                          SnackBar(
                            key: const Key('no_network_register'),
                            content: Center(
                              child: const Text('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Internet'),
                            ),
                            backgroundColor: Colors.red,
                          ),
                        );
                      } else {
                        if (body['status'] == 'ok') {
                          // ‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                          ScaffoldMessenger.of(context).showSnackBar(
                            SnackBar(
                              key: const Key('register_success'),
                              content: Center(
                                child: Text(body['message']),
                              ),
                              backgroundColor: Colors.green,
                            ),
                          );
                          // ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Login
                          Navigator.pushReplacementNamed(
                              context, AppRouter.login);
                        } else {
                          // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Error
                          ScaffoldMessenger.of(context).showSnackBar(
                            SnackBar(
                              key: const Key('register_error'),
                              content: Center(
                                child: Text(body['message']),
                              ),
                              backgroundColor: Colors.red,
                            ),
                          );
                        }
                      }
                    }
                  },
                ),
